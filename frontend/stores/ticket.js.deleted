import { defineStore } from 'pinia';
import { useAuthStore } from '~/stores/auth';
import { useTicketsStore } from '~/stores/tickets';
import { useNuxtApp } from '#app';

// AVISO: Este store está deprecated y será eliminado en el futuro.
// Por favor, utiliza useTicketsStore en su lugar.
// Este store ahora redirige a useTicketsStore para todas las operaciones.

export const useTicketStore = defineStore('ticket', {
  state: () => ({
    selectedScreening: null,
    selectedSeats: [],
    guestInfo: null,
    paymentInfo: null,
    loading: false,
    error: null
  }),

  getters: {
    getSelectedScreening: (state) => state.selectedScreening,
    getSelectedSeats: (state) => state.selectedSeats,
    getGuestInfo: (state) => state.guestInfo,
    getPaymentInfo: (state) => state.paymentInfo,
    isLoading: (state) => state.loading,
    getError: (state) => state.error,
    hasGuestInfo: (state) => state.guestInfo !== null,
    
    // Calcular el total a pagar basado en los asientos seleccionados
    getTotalAmount: (state) => {
      if (!state.selectedScreening || !state.selectedSeats.length) return 0;
      return state.selectedSeats.length * (state.selectedScreening.price || 100); // Precio por defecto 100 si no hay precio definido
    },
    
    // Verificar si se puede continuar con el siguiente paso
    canProceedToPayment: (state) => {
      return state.selectedScreening !== null && 
             state.selectedSeats.length > 0 && 
             state.guestInfo !== null;
    }
  },

  actions: {
    // Establecer la función seleccionada
    setSelectedScreening(screening) {
      this.selectedScreening = screening;
    },
    
    // Gestionar los asientos seleccionados
    selectSeat(seat) {
      const index = this.selectedSeats.findIndex(s => 
        s.row === seat.row && s.column === seat.column
      );
      
      if (index === -1) {
        this.selectedSeats.push(seat);
      }
    },
    
    unselectSeat(seat) {
      this.selectedSeats = this.selectedSeats.filter(s => 
        !(s.row === seat.row && s.column === seat.column)
      );
    },
    
    clearSelectedSeats() {
      this.selectedSeats = [];
    },
    
    // Establecer la información del invitado
    setGuestInfo(guestData) {
      this.guestInfo = guestData;
    },
    
    // Establecer la información de pago
    setPaymentInfo(paymentData) {
      this.paymentInfo = paymentData;
    },
    
    // Realizar el pago y completar la compra
    async completeGuestPurchase() {
      this.loading = true;
      this.error = null;
      
      try {
        if (!this.selectedScreening || this.selectedSeats.length === 0 || !this.paymentInfo) {
          throw new Error('Información incompleta para realizar la compra');
        }
        
        // Crear los datos básicos para la compra
        const purchaseData = {
          screening_id: this.selectedScreening.id,
          seats: this.selectedSeats.map(seat => ({
            row: seat.row,
            column: seat.column
          })),
          payment: this.paymentInfo
        };
        
        // Añadir información de invitado si está disponible
        if (this.guestInfo) {
          purchaseData.guest = this.guestInfo;
        }
        
        // Determinar si es un usuario autenticado o un invitado
        const { $pinia } = useNuxtApp();
        const authStore = useAuthStore($pinia);
        const isAuthenticated = authStore.isAuthenticated;
        
        // Seleccionar el endpoint y header según el tipo de usuario
        const endpoint = isAuthenticated 
          ? `http://localhost:8000/api/tickets/purchase` 
          : `http://localhost:8000/api/guest/tickets/purchase`;
        
        const headers = {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        };
        
        // Añadir token de autenticación si el usuario está autenticado
        if (isAuthenticated && authStore.token) {
          headers['Authorization'] = `Bearer ${authStore.token}`;
        }
        
        const response = await fetch(endpoint, {
          method: 'POST',
          headers,
          body: JSON.stringify(purchaseData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Error al completar la compra');
        }
        
        const data = await response.json();
        
        // Limpiar el estado después de una compra exitosa
        this.clearPurchaseData();
        
        return data;
      } catch (error) {
        this.error = error.message;
        console.error('Error al completar la compra:', error);
        return null;
      } finally {
        this.loading = false;
      }
    },
    
    // Limpiar todos los datos de la compra
    clearPurchaseData() {
      this.selectedScreening = null;
      this.selectedSeats = [];
      this.guestInfo = null;
      this.paymentInfo = null;
      this.error = null;
    },
    
    // Procesar una compra directamente sin método de pago y guardarla en la base de datos
    async processDirectPurchase() {
      this.loading = true;
      this.error = null;
      
      try {
        if (!this.selectedScreening || this.selectedSeats.length === 0) {
          throw new Error('Información incompleta para realizar la compra');
        }
        
        // Determinar si es un usuario autenticado o un invitado
        const { $pinia } = useNuxtApp();
        const authStore = useAuthStore($pinia);
        const ticketsStore = useTicketsStore($pinia);
        const isAuthenticated = authStore.isAuthenticated;
        
        // Generar código de confirmación
        const confirmationCode = generateRandomCode(8);
        
        // Guardar los datos de screening en el store de tickets
        ticketsStore.currentTicket = {
          screening_id: this.selectedScreening.id,
          screening: this.selectedScreening
        };
        
        // Transferir los asientos seleccionados al store de tickets
        ticketsStore.selectedSeats = [...this.selectedSeats];
        
        // Usar la lógica del store de tickets para confirmar la compra
        const reservationData = {
          screening_id: this.selectedScreening.id,
          seats: this.selectedSeats.map(seat => ({
            number: seat.number || `${seat.row}${seat.column}`
          })),
          confirmation_code: confirmationCode,
          quantity: this.selectedSeats.length,
          total_pay: this.getTotalAmount
        };
        
        // Llamar directamente a confirmTickets del store de tickets
        if (isAuthenticated) {
          try {
            // Usar el store de tickets para realizar la compra
            const result = await ticketsStore.confirmTickets(reservationData);
            
            if (!result) {
              throw new Error(ticketsStore.error || 'Error al confirmar los tickets');
            }
            
          } catch (apiError) {
            console.error('Error al guardar la compra en la API:', apiError);
            throw apiError; // Propagamos el error para detener el proceso
          }
        }
        
        // Crear objeto de confirmación de compra para compatibilidad
        const confirmation = {
          confirmation_code: confirmationCode,
          screening: this.selectedScreening,
          seats: this.selectedSeats,
          timestamp: new Date().toISOString(),
          total_amount: this.getTotalAmount
        };
        
        return confirmation;
      } catch (error) {
        this.error = error.message;
        console.error('Error al procesar la compra directa:', error);
        return null;
      } finally {
        this.loading = false;
      }
    }
  }
});

// Función auxiliar para generar códigos de confirmación
function generateRandomCode(length) {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
  let code = '';
  for (let i = 0; i < length; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}
